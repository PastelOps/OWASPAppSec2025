//Generated by LLM

function readCString(p){
    try{
       if (p.isNull()){ return 'NULL'; }
       return Memory.readUtf8String(p);
    } catch(_) {
        try{
            const buf=Memory.readByteArray(p,32);
            return Array.from(new Uint8Array(buf)).map(b=>('0'+b.toString(16)).slice(-2)).join(' ');
        } catch(_){
            return'<unreadable>';
        }
}}

function hookOSLog() {
  const os_log = Module.findExportByName(null, 'os_log');
  const os_log_with_type = Module.findExportByName(null, 'os_log_with_type');
  if (os_log) {
    Interceptor.attach(os_log, {
      onEnter(args) {
        console.log(`[os_log] fmt="${readCString(args[1])}"`);
      }
    });
    console.log('[+] Hooked os_log');
  }
  if (os_log_with_type) {
    Interceptor.attach(os_log_with_type, {
      onEnter(args) {
        const type = args[1].toInt32();
        console.log(`[os_log_with_type] type=${type} fmt="${readCString(args[2])}"`);
      }
    });
    console.log('[+] Hooked os_log_with_type');
  }

  const names = ['__os_log_impl', '_os_log_impl'];
  for (const n of names) {
    const p = Module.findExportByName('libsystem_trace.dylib', n)
           || Module.findExportByName(null, n);
    if (!p) continue;
    Interceptor.attach(p, {
      onEnter(args) {
        const type = args[2].toInt32 ? args[2].toInt32() : 0;
        const fmt = args[3];
        console.log(`[${n}] type=${type} fmt="${readCString(fmt)}"`);
      }
    });
    console.log(`[+] Hooked ${n}`);
  }

  const os_log_create = Module.findExportByName(null, 'os_log_create');
  if (os_log_create) {
    Interceptor.attach(os_log_create, {
      onEnter(args) {
        this.subsystem = readCString(args[0]);
        this.category  = readCString(args[1]);
      },
      onLeave(ret) {
        console.log(`[os_log_create] handle=${ret} subsystem="${this.subsystem}" category="${this.category}"`);
      }
    });
    console.log('[+] Hooked os_log_create');
  }
}

hookOSLog();